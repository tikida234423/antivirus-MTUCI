#include "../include/public/license_manager.h"

using namespace LicenseManager;

HTTPManager::HTTPManager()
{
}

size_t HTTPManager::WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
    ((std::string*)userp)->append((char*)contents, size * nmemb);
    return size * nmemb;
}

void HTTPManager::LogResponse(std::string response)
{
    logger << (LogMsg() << "Response: " << response);
}

bool HTTPManager::sendHttpRequest(const std::string& url, const std::string& jsonData, std::string& response, std::string jwtToken = "") 
{
    CURL* curl;
    CURLcode res;

    curl = curl_easy_init();
    if (curl) {
        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());

        if (!jsonData.empty()) {
            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, jsonData.c_str());
        }

        std::string readBuffer;
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, HTTPManager::WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);

        struct curl_slist* headers = NULL;
        headers = curl_slist_append(headers, "Content-Type: application/json");
        if (!jwtToken.empty()) {
            logger << jwtToken;
            std::string authHeader = "Authorization: Bearer " + jwtToken;
            headers = curl_slist_append(headers, authHeader.c_str());
        }
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);

        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);
        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L);
        logger << (LogMsg() << "CURL: \n" << curl);
        res = curl_easy_perform(curl);

        long http_code;
        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);
        logger << (LogMsg() << "Status Code: " << http_code);

        if (res != CURLE_OK) {
            logger << (LogMsg() << "curl_easy_perform() failed: " << curl_easy_strerror(res));
            curl_slist_free_all(headers);
            curl_easy_cleanup(curl);
            return false;
        }

        response = readBuffer;

        if (http_code == 403 && response == "")
        {
            response = "Access Denied.";
        }

        curl_slist_free_all(headers);
        curl_easy_cleanup(curl);
        return true;
    }
    
    return false;
}

std::string HTTPManager::ActivateLicense(
    std::string activationCode,
    std::string name,
    std::string macAddress,
    std::string accessToken
)
{
    std::string licenseUrl = baseUrl + "/license/activate";
    std::string jsonData = std::format("{{\"activationCode\": \"{}\", \"name\": \"{}\", \"macAddress\": \"{}\"}}",
    activationCode, name, macAddress);

    std::string response;

    sendHttpRequest(licenseUrl, jsonData, response, accessToken);

    LogResponse(response);

    return response;
}

std::string HTTPManager::GetAllLicenses(
    std::string name,
    std::string macAddress,
    std::string accessToken
)
{
    std::string licensesUrl = baseUrl + "/license/all";
    std::string jsonData = std::format("{{\"name\": \"{}\", \"macAddress\": \"{}\"}}",
    name, macAddress);

    logger << (LogMsg() << jsonData);

    std::string response;

    sendHttpRequest(licensesUrl, jsonData, response, accessToken);

    LogResponse(response);

    return response;
}

std::string HTTPManager::GetLicenseInfo(
    std::string activationCode,
    std::string deviceName,
    std::string macAddress,
    std::string accessToken
)
{
    std::string licenseUrl = baseUrl + "/license/info";
    std::string jsonData = std::format("{{\"activationCode\": \"{}\", \"name\": \"{}\", \"macAddress\": \"{}\"}}",
    activationCode, deviceName, macAddress);

    std::string response;

    sendHttpRequest(licenseUrl, jsonData, response, accessToken);

    // TODO: Сделать нормально
    if (!response.empty()) {
        if (response.at(0) == '{')
        {
            this->macAddress = macAddress;
            this->deviceName = deviceName;
            this->activationCode = activationCode;

            this->licenseTicket = response;
        }
    }

    return response;
}

std::string HTTPManager::RefreshTicket(std::string accessToken)
{
    std::string licenseUrl = baseUrl + "/license/info";
    std::string jsonData = std::format("{{\"activationCode\": \"{}\", \"name\": \"{}\", \"macAddress\": \"{}\"}}",
    this->activationCode, this->deviceName, this->macAddress);

    std::string response;

    sendHttpRequest(licenseUrl, jsonData, response, accessToken);

    // TODO: Сделать нормально
    if (!response.empty()) {
        if (response.at(0) == '{')
        {
            this->licenseTicket = response;
        }
    }

    return response;
}

std::string HTTPManager::GetAllRenewal(std::string accessToken)
{
    std::string licensesUrl = baseUrl + "/license/renewal/all";
    std::string jsonData = "";

    std::string response;

    sendHttpRequest(licensesUrl, jsonData, response, accessToken);

    LogResponse(response);

    return response;
}

std::string HTTPManager::RenewalLicense(
    std::string activationCode,
    std::string accessToken
)
{
    std::string licenseUrl = baseUrl + "/license/renewal";
    std::string jsonData = std::format("{{\"activationCode\": \"{}\"}}",
    activationCode);

    std::string response;

    sendHttpRequest(licenseUrl, jsonData, response, accessToken);

    return response;
}

void HTTPManager::DeactivateLicense()
{
    this->macAddress = "";
    this->deviceName = "";
    this->activationCode = "";
    this->licenseTicket = "";
}