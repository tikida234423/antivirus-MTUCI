#include "../include/public/account_manager.h"

using namespace AccountManager;

HTTPManager::HTTPManager()
{
}

size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
    ((std::string*)userp)->append((char*)contents, size * nmemb);
    return size * nmemb;
}

void HTTPManager::LogResponse(std::string response)
{
    logger << (LogMsg() << "Response: " << response);
}

bool HTTPManager::sendHttpRequest(const std::string& url, const std::string& jsonData, std::string& response) 
{
    CURL* curl;
    CURLcode res;

    curl = curl_easy_init();
    if (curl) {
        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());

        if (!jsonData.empty()) {
            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, jsonData.c_str());
        }

        std::string readBuffer;
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);

        struct curl_slist* headers = NULL;
        headers = curl_slist_append(headers, "Content-Type: application/json");
        if (!jwtToken.empty()) {
            logger << jwtToken;
            std::string authHeader = "Authorization: Bearer " + jwtToken;
            headers = curl_slist_append(headers, authHeader.c_str());
        }
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);

        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);
        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L);
        res = curl_easy_perform(curl);

        long http_code;
        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);
        logger << (LogMsg() << "Staus Code: " << http_code);

        if (res != CURLE_OK) {
            logger << (LogMsg() << "curl_easy_perform() failed: " << curl_easy_strerror(res));
            curl_slist_free_all(headers);
            curl_easy_cleanup(curl);
            return false;
        }

        response = readBuffer;

        if (http_code == 403 && response == "")
        {
            response = "Access Denied.";
        }

        curl_slist_free_all(headers);
        curl_easy_cleanup(curl);
        return true;
    }
    
    return false;
}

std::string HTTPManager::Register(
    std::string username,
    std::string email,
    std::string password
    )
{
    std::string registerUrl = baseUrl + "/auth/register";
    std::string jsonData = std::format("{{\"username\": \"{}\",\"email\": \"{}\",\"password\": \"{}\"}}", 
    username, email, password);

    std::string response = "Failed to send HTTP request";

    sendHttpRequest(registerUrl, jsonData, response);

    LogResponse(response);

    return response;
}

std::string HTTPManager::Login(
    std::string email,
    std::string password,
    int deviceId
)
{
    std::string loginUrl = baseUrl + "/auth/login";
    std::string jsonData = std::format("{{\"email\": \"{}\",\"password\": \"{}\",\"deviceId\": {}}}", 
    email, password, deviceId);

    std::string response = "Failed to send HTTP request";

    sendHttpRequest(loginUrl, jsonData, response);

    LogResponse(response);

    std::regex jwtTokenRegex(R"(\"accessToken\":\"(.*?)\")");
    std::smatch match;
    if (std::regex_search(response, match, jwtTokenRegex)) 
    {
        this->jwtToken = match[1];
        logger << this->jwtToken;
    }
    else 
    {
        logger << "jwt not found";
    }

    std::regex refreshTokenRegex(R"(\"refreshToken\":\"(.*?)\")");
    std::smatch match2;
    if (std::regex_search(response, match2, refreshTokenRegex))
    {
        this->refreshToken = match2[1];
        logger << this->refreshToken;
    }
    else
    {
        logger << "refresh token not found";
    }

    this->deviceId = deviceId;

    return response;
}

VOID HTTPManager::RefreshToken()
{
    std::string refreshUrl = baseUrl + "/auth/refresh";
    std::string jsonData = std::format("{{\"refreshToken\": \"{}\",\"deviceId\": {}}}", 
    this->refreshToken, this->deviceId);

    std::string response = "Failed to send HTTP request";

    sendHttpRequest(refreshUrl, jsonData, response);

    LogResponse(response);

    std::regex jwtTokenRegex(R"(\"accessToken\":\"(.*?)\")");
    std::smatch match;
    if (std::regex_search(response, match, jwtTokenRegex))
    {
        this->jwtToken = match[1];
        logger << this->jwtToken;
    }
    else
    {
        logger << "jwt not found";
    }

    std::regex refreshTokenRegex(R"(\"refreshToken\":\"(.*?)\")");
    std::smatch match2;
    if (std::regex_search(response, match2, refreshTokenRegex))
    {
        this->refreshToken = match2[1];
        logger << this->refreshToken;
    }
    else
    {
        logger << "refresh token not found";
    }
}

VOID HTTPManager::LogOut()
{
    this->jwtToken.clear();
    this->refreshToken.clear();
    this->deviceId = 0;
}