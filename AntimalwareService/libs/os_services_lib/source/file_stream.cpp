#include "../include/public/file_stream.h"

FileStream::FileStream(const std::u16string& name)
	: WindowsStream(CreateFileW(
		reinterpret_cast<LPCWSTR>(name.c_str()),
		GENERIC_READ |
		GENERIC_WRITE,
		0,
		NULL,
		OPEN_ALWAYS,
		0,
		NULL)
	)
{
	if (m_handle != INVALID_HANDLE_VALUE)
	{
		// log succsess
	}
	else
	{
		// log error
	}
}

FileStream::~FileStream()
{
	if (m_handle != INVALID_HANDLE_VALUE)
	{
		CloseHandle(m_handle);
	}
}

uint32_t FileStream::Write(uint8_t* data, uint32_t length)
{
	return WindowsStream::Write(data, length);
}

uint32_t FileStream::Read(uint8_t* data, uint32_t length)
{
	return WindowsStream::Read(data, length);
}

int64_t FileStream::GetCurrentPosition() const
{
	LARGE_INTEGER newPosition = { 0 };
	LARGE_INTEGER currentPosition = { 0 };
	SetFilePointerEx(m_handle, newPosition, &currentPosition, FILE_CURRENT);
	return currentPosition.QuadPart;
}

void FileStream::SetCurrentPosition(int64_t position, PositionSet positionSet)
{
	LARGE_INTEGER newPosition = { 0 };
	LARGE_INTEGER currentPosition = { 0 };
	SetFilePointerEx(m_handle, newPosition, &currentPosition, ConvertPositionSet(positionSet));
	newPosition.QuadPart += position;
	SetFilePointerEx(m_handle, newPosition, nullptr, ConvertPositionSet(positionSet));
}

int64_t FileStream::GetSize() const
{
	LARGE_INTEGER li = { 0 };
	if (GetFileSizeEx(m_handle, &li) == 0)
	{
		return -1;
	}
	return li.QuadPart;
}

DWORD FileStream::ConvertPositionSet(PositionSet positionSet)
{
	switch (positionSet)
	{
		case PositionSet::Begin:
			return FILE_BEGIN;
		case PositionSet::Current:
			return FILE_CURRENT;
		case PositionSet::End:
			return FILE_END;
		default:
			return FILE_BEGIN;
	}
}


