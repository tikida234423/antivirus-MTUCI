cmake_minimum_required(VERSION 3.20)

if (POLICY CMP0141)
    cmake_policy(SET CMP0141 NEW)
    set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT "$<IF:$<AND:$<C_COMPILER_ID:MSVC>,$<CXX_COMPILER_ID:MSVC>>,$<$<CONFIG:Debug,RelWithDebInfo>:EditAndContinue>,$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>>")
endif()

message ("Debug Mode is on")
set (DEBUG 1)

set (CMAKE_CXX_STANDARD 20)
set (CMAKE_CXX_STANDARD_REQUIRED ON)

set (CMAKE_C_STANDARD 17)
set (CMAKE_C_STANDARD_REQUIRED ON)

if(MSVC)
    add_compile_options(/std:c++latest)
elseif(CMAKE_COMPILER_IS_GNUCXX)
    add_compile_options(-std=c++20)
endif()

set (APP_NAME "AntimalwareServiceApp")
set (APP_VERSION "debug")
set (APP_PACKAGE "AtimalwareServiceApp")

set (FILE_NAME_LOG "AntiMalware")

project(AntimalwareServiceApp)

set (SEP_WIN "\\\\")

set (LOG_PATH ${CMAKE_SOURCE_DIR}/logs)
set (MAX_LOG_SIZE 100)

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set (DIR_SEPARATOR "'${SEP_WIN}'")
elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set (DIR_SEPARATOR '/')
else()
    set (DIR_SEPARATOR '/')
endif()

message ("Including subdirectories")

add_subdirectory(apps/antimalware_service_app)
add_subdirectory(libs/logger)
add_subdirectory(libs/os_services_lib)
add_subdirectory(libs/account_manager_lib)
add_subdirectory(libs/license_manager_lib)
add_subdirectory(libs/av_bases_lib)
add_subdirectory(libs/scan_engine)

message ("Linking static libraries")

set (BASE_PATH "C:/Projects/Antimalware/AntimalwareService")
set (LIB_PAH "libs")
set (LOGGER_PATH ${LIB_PATH}/logger/source)
set (ACCOUNT_MNGR_PATH ${LIB_PATH}/account_manager_lib/source)
set (LICENSE_MNGR_PATH ${LIB_PATH}/license_manager_lib/source)
set (AV_BASES_PATH ${LIB_PATH}/av_bases_lib/source)
set (ENGINE_PATH ${LIB_PATH}/scan_engine/source)

add_library(Logger STATIC ${LIB_SRC})
add_library(os_services_lib STATIC ${PIPE_SRC})
add_library(account_manager_lib STATIC ${ACCOUNT_MNGR_SRC})
add_library(license_manager_lib STATIC ${LICENSE_MNGR_SRC})
add_library(av_bases_lib STATIC ${AV_BASES_SRC})
add_library(scan_engine STATIC ${ENGINE_SRC})
add_library(zlib SHARED IMPORTED)
add_library(curl SHARED IMPORTED)

set_target_properties(Logger PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${BASE_PATH}/libs/logger/include/public"
    PUBLIC_HEADER "${BASE_PATH}/libs/logger/include/public/Logger.h"
)

set_target_properties(zlib PROPERTIES
    IMPORTED_LOCATION "${BASE_PATH}/libs/zlib/bin/zlibd1.dll"
    IMPORTED_IMPLIB "${BASE_PATH}/libs/zlib/lib/zlibd.lib"
)

set_target_properties(os_services_lib PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${BASE_PATH}/libs/os_services_lib/include/public"
    PUBLIC_HEADER "${BASE_PATH}/libs/os_services_lib/include/public/pipe_server.h"
)

set_property(TARGET curl PROPERTY
             IMPORTED_LOCATION "${BASE_PATH}/libs/curl/bin/libcurl-d.dll")

set_property(TARGET curl PROPERTY
    IMPORTED_IMPLIB "${BASE_PATH}/libs/curl/lib/libcurl-d.lib")

set_property(TARGET curl PROPERTY
    INTERFACE_INCLUDE_DIRECTORIES "${BASE_PATH}/libs/curl/include")

set_target_properties(curl PROPERTIES RUNTIME_OUTPUT_DIRECTORY "C:/Projects/Antimalware/AntimalwareService/build/Debug")

target_link_libraries(account_manager_lib PRIVATE zlib)
target_link_libraries(account_manager_lib PRIVATE curl)
target_link_libraries(account_manager_lib PRIVATE Logger)

target_link_libraries(license_manager_lib PRIVATE zlib)
target_link_libraries(license_manager_lib PRIVATE curl)
target_link_libraries(license_manager_lib PRIVATE Logger)

target_link_libraries(av_bases_lib PRIVATE zlib)
target_link_libraries(av_bases_lib PRIVATE curl)
target_link_libraries(av_bases_lib PRIVATE Logger)

target_link_libraries(scan_engine PRIVATE Logger)

target_include_directories(Logger PUBLIC ${LOGGER_PATH})
target_include_directories(os_services_lib PUBLIC ${PIPE_PATH})
target_include_directories(account_manager_lib PUBLIC ${ACCOUNT_MNGR_PATH})
target_include_directories(license_manager_lib PUBLIC ${LICENSE_MNGR_PATH})
target_include_directories(av_bases_lib PUBLIC ${AV_BASES_PATH})
target_include_directories(scan_engine PUBLIC ${ENGINE_PATH})

message ("Compiling executable")

add_executable(${PROJECT_NAME} ${SERVICE_SRC})

target_link_libraries(${PROJECT_NAME} PRIVATE Logger)
target_link_libraries(${PROJECT_NAME} PRIVATE os_services_lib)
target_link_libraries(${PROJECT_NAME} PRIVATE zlib)
target_link_libraries(${PROJECT_NAME} PRIVATE curl)
target_link_libraries(${PROJECT_NAME} PRIVATE account_manager_lib)
target_link_libraries(${PROJECT_NAME} PRIVATE license_manager_lib)
target_link_libraries(${PROJECT_NAME} PRIVATE av_bases_lib)
target_link_libraries(${PROJECT_NAME} PRIVATE scan_engine)

add_custom_command(
    TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    ${BASE_PATH}/libs/zlib/bin/zlibd1.dll
    ${BASE_PATH}/build/Debug/zlibd1.dll
)

add_custom_command(
    TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    ${BASE_PATH}/libs/curl/bin/libcurl-d.dll
    ${BASE_PATH}/build/Debug/libcurl-d.dll
)