﻿using AntimalwareUI.Properties;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO.Pipelines;
using System.Linq;
using System.Net.NetworkInformation;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace AntimalwareUI
{
    internal static class Program
    {
        /// <summary>
        /// Главная точка входа для приложения.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);

            Application.Run(new MyCustomApplicationContext());
        }
    }

    public class MyCustomApplicationContext : ApplicationContext
    {
        private NotifyIcon trayIcon;

        private Form form;

        private NamedPipe pipe;

        public MyCustomApplicationContext()
        {

            const string pipeName = "antivirus";

            pipe = new NamedPipe(pipeName);

            form = new LoginForm(this);

            trayIcon = new NotifyIcon()
            {
                Icon = Resources.AppIcon,
                ContextMenu = new ContextMenu(new MenuItem[] {
                    new MenuItem("Open", OpenCurrentForm),
                    new MenuItem("Exit", Exit)
                }),
                Visible = true
            };

            trayIcon.DoubleClick += new System.EventHandler(this.trayIcon_DoubleClick);

            form.Show();

            pipe.Connect();
        }

        public void LogOut()
        {
            pipe.SendMessage($"LogOut");

            setToLoginForm();
        }

        public string RenewalLicense(string uuid)
        {
            pipe.SendMessage($"RenewalLicense|{uuid}");

            return pipe.ReceiveMessage();
        }

        public string GetLicenseInfo(string uuid, string deviceName, string macAddress)
        {
            pipe.SendMessage($"LicenseInfo|{uuid}|{deviceName}|{macAddress}");

            return pipe.ReceiveMessage();
        }

        public void LicenseDeactivate()
        {
            pipe.SendMessage("LicenseDeactivate");
        }
        public string ActivateLicense(string activationCode, string deviceName, string macAddress)
        {
            pipe.SendMessage($"ActivateLicense|{activationCode}|{deviceName}|{macAddress}");

            return pipe.ReceiveMessage();
        }

        public void RefreshToken()
        {
            pipe.SendMessage("RefreshToken");
        }

        public string getAllRenewal()
        {
            pipe.SendMessage("AllRenewal");

            return pipe.ReceiveMessage();
        }

        public string readScanFile()
        {
            return pipe.ReceiveMessage();
        }

        public void refreshBases()
        {
            pipe.SendMessage("RefreshBases");
        }

        public async Task<string> scanFile(string filename)
        {
            pipe.SendMessage($"ScanFile|{filename}");

            Task<string> task = Task.Run(() => readScanFile());
            string result = await task;

            return result;
        }

        public async Task<string> scanFolder(string folderPath)
        {
            pipe.SendMessage($"ScanFolder|{folderPath}");

            Task<string> task = Task.Run(() => readScanFile());
            string result = await task;

            return result;
        }


        public string getAllLicenses(string deviceName, string macAddress)
        {
            pipe.SendMessage($"AllLicense|{deviceName}|{macAddress}");

            return pipe.ReceiveMessage();
        }

        public void OpenCurrentForm(object Sender, EventArgs e)
        {
            this.form.Show();
        }

        public void register(
            string username,
            string email,
            string password
            )
        {
            if (email.Length == 0 || 
                username.Length == 0 ||
                password.Length == 0)
            {
                MessageBox.Show("Please enter username, email and password", "username, email or passwrod empty", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            pipe.SendMessage($"Register|{username}|{email}|{password}");

            string message = pipe.ReceiveMessage();

            if (message.Contains("\"status\":\"Ok\""))
            {
                return;
            }
            MessageBox.Show(message, "Register error", MessageBoxButtons.OK, MessageBoxIcon.Information);
            return;
        }

        public void login(
            string email,
            string password,
            string deviceID
            )
        {
            if (email.Length == 0 || 
                password.Length == 0 ||
                deviceID.Length == 0)
            {
                MessageBox.Show("Please enter email, password and device id", "Email, passwrod or device id empty", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            pipe.SendMessage($"Login|{email}|{password}|{deviceID}");

            string message = pipe.ReceiveMessage();

            try
            {
                dynamic data = JsonConvert.DeserializeObject<dynamic>(message);

                string jsonEmail = data.email;
                string jsonAccessToken = data.tokens.accessToken;
                string jsonRefreshToken = data.tokens.refreshToken;
                string jsonUsername = data.username;

                if (jsonUsername == null ||
                    jsonAccessToken == null ||
                    jsonRefreshToken == null ||
                    jsonUsername == null)
                {
                    MessageBox.Show("Some required fields are missing", "Login error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                setToMainForm();
            }
            catch (Exception ex)
            {
                dynamic data = JsonConvert.DeserializeObject<dynamic>(message);

                string status = data.status;

                MessageBox.Show(status, "Login error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
        }

        public void setToRegisterForm()
        {

            RegisterForm regForm = new RegisterForm(this);

            this.form.Hide();
            this.form = null;
            GC.Collect();
            GC.WaitForPendingFinalizers();

            this.form = regForm;

            form.Show();

        }

        public void setToLoginForm()
        {

            LoginForm loginForm = new LoginForm(this);

            this.form.Hide();
            this.form = null;
            GC.Collect();
            GC.WaitForPendingFinalizers();

            this.form = loginForm;

            form.Show();

        }

        public void setToMainForm()
        {
            MainForm mainForm = new MainForm(this);

            this.form.Hide();
            this.form = null;
            GC.Collect();
            GC.WaitForPendingFinalizers();

            this.form = mainForm;

            form.Show();
        }

        private void trayIcon_DoubleClick(object Sender, EventArgs e)
        {

            this.form.Show();

        }

        void Exit(Object sender, EventArgs e)
        {

            trayIcon.Visible = false;

            Application.Exit();

        }
    }
}
