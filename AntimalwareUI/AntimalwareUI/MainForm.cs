﻿﻿﻿﻿using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO.Pipelines;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using System;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace AntimalwareUI
{
    public partial class MainForm : Form
    {
        MyCustomApplicationContext context;

        private int filesChecked;

        private int threatsDetected;

        // Scheduled scan fields
        private bool timerRunning = false;
        private string selectedFolderSchedule = string.Empty;
        private System.Windows.Forms.Timer timerScheduled;

        public MainForm(MyCustomApplicationContext context)
        {
            this.context = context;

            InitializeComponent();

            DeviceNameAndMacAddressSetup();

            ResumeListSetup();

            RenewalListSetup();

            this.refreshTokenTimer.Enabled = true;
            this.scannerPage.Enabled = false;

            InitializeScheduledTimer();
        }

        private void refreshTokenTimer_Tick(System.Object sender, System.EventArgs e)
        {
            this.context.RefreshToken();
        }

        private void RenewalListSetup()
        {
            string result = this.context.getAllRenewal();

            dynamic data = JsonConvert.DeserializeObject<dynamic>(result);

            if (result != null && result.StartsWith("["))
            {
                result = result.Trim();
                result = result.Substring(1, result.Length - 2);

                char[] delimiters = new char[] { ',', ' ' };
                string[] uuids = result.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);

                foreach (string uuid in uuids)
                {
                    string trimmedUuid = uuid.Trim();
                    trimmedUuid = trimmedUuid.Replace("\"", "");

                    if (!string.IsNullOrEmpty(trimmedUuid))
                    {
                        renewalList.Items.Add(trimmedUuid);
                    }
                }
            }
        }

        private void ResumeListSetup()
        {
            string deviceName = deviceNameLabel.Text.Replace("Device name: ", "");
            string macAddress = macAddressLabel.Text.Replace("Mac Address: ", "");

            string result = this.context.getAllLicenses(deviceName, macAddress);

            dynamic data  = JsonConvert.DeserializeObject<dynamic>(result);

            if (data != null)
            {
                if (data.status == "Ok")
                {
                    foreach (string license in data.licenses)
                    {
                        resumeList.Items.Add(license);
                    }
                }
            }
        }

        private void DeviceNameAndMacAddressSetup()
        {
            string deviceName = System.Environment.MachineName;
            deviceNameLabel.Text = "Device name: " + deviceName;

            var macAddr =
            (
                from nic in NetworkInterface.GetAllNetworkInterfaces()
                where nic.OperationalStatus == OperationalStatus.Up
                select nic.GetPhysicalAddress().ToString()
            ).FirstOrDefault();

            if (macAddr != null)
            {
                macAddr = Regex.Replace(macAddr, "(.{2})", "$1-").TrimEnd('-');
            }
            else
            {
                macAddr = "Mac Address not found";
            }

            macAddressLabel.Text = "Mac Address: " + macAddr;
        }

        private void menuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }

        private void infoPage_Click(object sender, EventArgs e)
        {

        }

        private void exitButton_Click(object sender, EventArgs e)
        {
            this.refreshTokenTimer.Enabled = false;

            this.context.LogOut();
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (e.CloseReason == CloseReason.UserClosing)
            {
                if (DialogResult.Yes == MessageBox.Show("Are you sure you wish to exit?", "Exit Confirmation", MessageBoxButtons.YesNo))
                    this.Hide();
                e.Cancel = true;
            }
        }

        private void activateButton_Click(object sender, EventArgs e)
        {
            string actvationCode = activationLabel.Text;
            if (string.IsNullOrEmpty(actvationCode))
            {
                MessageBox.Show("Please enter activation code", "Activation code empty", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            string deviceName = deviceNameLabel.Text.Replace("Device name: ", "");
            string macAddress = macAddressLabel.Text.Replace("Mac Address: ", "");

            string result = this.context.ActivateLicense(actvationCode, deviceName, macAddress);

            try
            {
                dynamic data = JsonConvert.DeserializeObject<dynamic>(result);

                if (data.currentDate == null ||
                    data.lifetime == null ||
                    data.activationDate == null ||
                    data.expirationDate == null ||
                    data.userId == null ||
                    data.deviceId == null ||
                    data.licenseBlocked == null ||
                    data.digitalSignature == null ||
                    data.info == null ||
                    data.status == null)
                {
                    MessageBox.Show("Some required fields are missing", "Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(result, "Activation error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            bool licenseExists = false;

            foreach (string item in resumeList.Items)
            {
                if (item == actvationCode)
                {
                    licenseExists = true;
                    break;
                }
            }

            if (!licenseExists)
            {
                resumeList.Items.Add(actvationCode);
            }

            MessageBox.Show("The license has been successfully activated", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);

            activationLabel.Text = "";
        }

        private void setTicket(dynamic ticket)
        {
            ticketReceiptDateLabel.Text = "Ticket receipt date:  " + ticket.currentDate;
            ticketLifetimeLabel.Text = "Ticket lifetime: " + ticket.lifetime;
            licenseActivationLabel.Text = "License activation: " + ticket.activationDate;
            licenseExpireLabel.Text = "License expire: " + ticket.expirationDate;
            userIDLabel.Text = "User Id: " + ticket.userId;
            deviceIDLabel.Text= "Device Id: " + ticket.deviceId;
            isBlockedLabel.Text = "License is blocked: " + ticket.licenseBlocked;
            digitalSignatureLabel.Text = "Digital signature: " + ticket.digitalSignature;
        }

        private void resumeButton_Click(object sender, EventArgs e)
        {
            if (resumeList.SelectedItem != null)
            {
                string selectedUuid = resumeList.SelectedItem.ToString();
                string deviceName = deviceNameLabel.Text.Replace("Device name: ", "");
                string macAddress = macAddressLabel.Text.Replace("Mac Address: ", "");

                string result = this.context.GetLicenseInfo(selectedUuid, deviceName, macAddress);

                try
                {
                    dynamic data = JsonConvert.DeserializeObject<dynamic>(result);
                    dynamic ticket = data.ticket;

                    if (ticket.currentDate == null ||
                        ticket.lifetime == null ||
                        ticket.activationDate == null ||
                        ticket.expirationDate == null ||
                        ticket.userId == null ||
                        ticket.deviceId == null ||
                        ticket.licenseBlocked == null ||
                        ticket.digitalSignature == null ||
                        ticket.info == null ||
                        ticket.status == null)
                    {
                        MessageBox.Show("Some required fields are missing", "Error",
    MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    curLicenseLabel.Text = "Current License: " + selectedUuid;
                    setTicket(ticket);

                    bool isBlocked = ticket.licenseBlocked;

                    if (!isBlocked && tabControl1.TabPages.IndexOf(scannerPage) == -1)
                    {
                        tabControl1.TabPages.Add(scannerPage);
                    }

                    this.scannerPage.Enabled = true;
                    this.refreshTicketTimer.Enabled = true;

                    MessageBox.Show("The license has been successfully resumed", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(result, "Resume error",
    MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
            }
        }

        private void ClearTicket()
        {
            curLicenseLabel.Text = "Current lisense: ";
            ticketReceiptDateLabel.Text = "Ticket receipt date:  ";
            ticketLifetimeLabel.Text = "Ticket time live: ";
            licenseActivationLabel.Text = "License activation: ";
            licenseExpireLabel.Text = "License expire: ";
            userIDLabel.Text = "User Id: ";
            deviceIDLabel.Text = "Device Id: ";
            isBlockedLabel.Text = "License is blocked: ";
            digitalSignatureLabel.Text = "Digital signature: ";
        }

        private void button1_Click(object sender, EventArgs e)
        {
            ClearTicket();

            this.context.LicenseDeactivate();

            this.scannerPage.Enabled = false;
            this.refreshTicketTimer.Enabled = false;

            MessageBox.Show("The license has been deactivated", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);

        }

        private void renewalButton_Click(object sender, EventArgs e)
        {
            if (renewalList.SelectedItem != null)
            {
                string selectedUuid = renewalList.SelectedItem.ToString();

                string result = this.context.RenewalLicense(selectedUuid);

                try
                {
                    dynamic data = JsonConvert.DeserializeObject<dynamic>(result);
                    dynamic ticket = data.ticket;

                    if (ticket.currentDate == null ||
                        ticket.lifetime == null ||
                        ticket.activationDate == null ||
                        ticket.expirationDate == null ||
                        ticket.userId == null ||
                        ticket.licenseBlocked == null ||
                        ticket.digitalSignature == null ||
                        ticket.info == null ||
                        ticket.status == null)
                    {
                        MessageBox.Show("Some required fields are missing", "Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    MessageBox.Show("The license has been successfully renewal", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(result, "Renewal error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

            }
            else
            {
                MessageBox.Show("Choose uuid!", "Resume error", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public void addToResultListBox(string result)
        {
            if (string.IsNullOrEmpty(result))
            {
                return;
            }

            string[] parts = result.Split('|');
            string filePath = parts[0];
            string isMalwareString = parts[1];
            string malwareName = parts[2];

            string fileName = System.IO.Path.GetFileName(filePath);

            bool isMalware = (isMalwareString.ToLower() == "true");
            string threatPresence = isMalware ? "yes" : "no";

            string resultString = string.Format("Filename: {0}, Threat presence: {1}, {2}",
                fileName,
                threatPresence,
                isMalware ? malwareName : "There is no threat");

            resultList.Items.Add(resultString);

            filesChecked++;

            if (isMalware)
            {
                threatsDetected++;
            }

            lThreatsDetected.Text = string.Format("Threats detected: {0}", threatsDetected);
            lFilesChecked.Text = string.Format("Files checked: {0}", filesChecked);
        }

        private async void startScanButton_Click(object sender, EventArgs e)
        {
            if (fileScanRadioButton.Checked)
            {
                String selectedFile;

                using (OpenFileDialog openFileDialog = new OpenFileDialog())
                {
                    openFileDialog.Title = "Select file";
                    openFileDialog.InitialDirectory = @"C:\";
                    openFileDialog.Filter = "Exe files (*.exe)|*.exe|Python files (*.py)|*.py";
                    openFileDialog.FilterIndex = 2;
                    openFileDialog.RestoreDirectory = true;

                    if (openFileDialog.ShowDialog() == DialogResult.OK)
                    {
                        selectedFile = openFileDialog.FileName;
                        resultList.Items.Clear();

                        Task<string> result = this.context.scanFile(selectedFile);

                        string data = await result;

                        if (data == null || data == "")
                        {
                            return;
                        }

                        string[] parts = data.Split('|');
                        string filePath = parts[0];
                        string isMalwareString = parts[1];
                        string malwareName = parts[2];

                        string fileName = System.IO.Path.GetFileName(filePath);
                        bool isMalware = isMalwareString.ToLower() == "true";
                        string threatPresence = isMalware ? "yes" : "no";

                        string resultString = string.Format(
                            "Filename: {0}, Threat presence: {1}, {2}",
                            fileName,
                            threatPresence,
                            isMalware ? malwareName : "There is no threat"
                        );
                        
                        resultList.Items.Add(resultString);
                        filesChecked++;

                        if (isMalware)
                        {
                            threatsDetected++;
                        }

                        lThreatsDetected.Text = string.Format("Threats detected: {0}", threatsDetected);
                        lFilesChecked.Text = string.Format("Files checked: {0}", filesChecked);
                    }
                }
            }

            else if (folderScanRadioButton.Checked)
            {
                string selectedFolder;

                using (FolderBrowserDialog selectFolder = new FolderBrowserDialog())
                {
                    selectFolder.Description = "Select folder";
                    selectFolder.ShowNewFolderButton = false;
                    selectFolder.RootFolder = Environment.SpecialFolder.Desktop;

                    if (selectFolder.ShowDialog() == DialogResult.OK)
                    {
                        selectedFolder = selectFolder.SelectedPath;
                        resultList.Items.Clear();
                        
                        // Reset counters
                        filesChecked = 0;
                        threatsDetected = 0;
                        lThreatsDetected.Text = "Threats detected: 0";
                        lFilesChecked.Text = "Files checked: 0";

                        Task<string> result = this.context.scanFolder(selectedFolder);
                        string data = await result;

                        if (data != null && !string.IsNullOrEmpty(data))
                        {
                            // Split multiple results by '&' separator
                            string[] scanResults = data.Split('&');
                            
                            foreach (string scanResult in scanResults)
                            {
                                if (!string.IsNullOrEmpty(scanResult))
                                {
                                    addToResultListBox(scanResult);
                                }
                            }
                        }
                    }
                    else
                    {
                        return;
                    }
                }
            }

        }

        private void refreshBasesTimer_Tick(object sender, EventArgs e)
        {

            this.context.refreshBases();

        }

        // Initialize scheduled scan timer
        private void InitializeScheduledTimer()
        {
            timerScheduled = new System.Windows.Forms.Timer();
            timerScheduled.Tick += timerScheduled_Tick;
        }

        // Scheduled scan button click event (converted from C++/CLI)
        private async void btnStartScheduled_Click(object sender, EventArgs e)
        {
            if (!timerRunning)
            {
                string time = this.tbScheduled.Text;

                if (string.IsNullOrEmpty(time) || time == "Input time in minutes")
                {
                    MessageBox.Show("Please enter time in minutes", "Time error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                using (FolderBrowserDialog selectFolder = new FolderBrowserDialog())
                {
                    selectFolder.Description = "Select folder";
                    selectFolder.ShowNewFolderButton = false;
                    selectFolder.RootFolder = Environment.SpecialFolder.Desktop;

                    if (selectFolder.ShowDialog() == DialogResult.OK)
                    {
                        selectedFolderSchedule = selectFolder.SelectedPath;
                        
                        if (int.TryParse(time, out int timeInMinutes))
                        {
                            int timeInMilliseconds = timeInMinutes * 60 * 1000;
                            timerScheduled.Interval = timeInMilliseconds;
                            timerScheduled.Start();
                            timerRunning = true;
                            this.btnStartScheduled.Text = "Stop schedule";
                            
                            MessageBox.Show($"Scheduled scan started. Folder: {selectedFolderSchedule}\nInterval: {timeInMinutes} minutes", 
                                          "Schedule Started", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        else
                        {
                            MessageBox.Show("Please enter a valid number for time in minutes", "Invalid Time", 
                                          MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                    }
                    else
                    {
                        return;
                    }
                }
            }
            else
            {
                timerScheduled.Stop();
                timerRunning = false;
                this.btnStartScheduled.Text = "Start schedule";
                MessageBox.Show("Schedule stopped", "Notification", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        // Scheduled timer tick event (converted from C++/CLI)
        private async void timerScheduled_Tick(object sender, EventArgs e)
        {
            try
            {
                resultList.Items.Clear();
                
                // Reset counters for scheduled scan
                filesChecked = 0;
                threatsDetected = 0;
                lThreatsDetected.Text = "Threats detected: 0";
                lFilesChecked.Text = "Files checked: 0";

                // Send scan folder command using named pipe communication format
                Task<string> result = this.context.scanFolder(selectedFolderSchedule);
                string data = await result;

                if (data != null && !string.IsNullOrEmpty(data))
                {
                    // Split multiple results by '&' separator
                    string[] scanResults = data.Split('&');
                    
                    foreach (string scanResult in scanResults)
                    {
                        if (!string.IsNullOrEmpty(scanResult))
                        {
                            addToResultListBox(scanResult);
                        }
                    }
                    
                    // Show notification about completed scheduled scan
                    MessageBox.Show($"Scheduled scan completed.\nFiles checked: {filesChecked}\nThreats detected: {threatsDetected}", 
                                  "Scheduled Scan Complete", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error during scheduled scan: {ex.Message}", "Scheduled Scan Error", 
                              MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
