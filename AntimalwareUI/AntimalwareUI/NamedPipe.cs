using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace AntimalwareUI
{
    internal class NamedPipe
    {

        private readonly string _pipeName;
        private NamedPipeClientStream _clientStream;

        public NamedPipe(string pipeName)
        {
            _pipeName = pipeName;
        }

        public void Connect()
        {
            try
            {
                _clientStream = new NamedPipeClientStream(
                    ".",
                    _pipeName,
                    PipeDirection.InOut
                    );

                Console.WriteLine("Подключение к серверу...");
                _clientStream.Connect();

                Console.WriteLine("Соединение установлено!");

            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка подключения: {ex.Message}");
                throw;
            }
        }

        public void SendMessage(string message)
        {
            try
            {
                var bytes = Encoding.UTF8.GetBytes(message);
                _clientStream.Write(bytes, 0, bytes.Length);
                Console.WriteLine($"Отправлено: {message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при отправке сообщения: {ex.Message}");
                throw;
            }
        }

        public string ReceiveMessage()
        {
            try
            {
                var buffer = new byte[1024];
                int bytesRead = _clientStream.Read(buffer, 0, buffer.Length);
                string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);

                return message;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при получении сообщения: {ex.Message}");
                throw;
            }
        }

        public void Disconnect()
        {
            try
            {
                if (_clientStream != null && _clientStream.IsConnected)
                {
                    _clientStream.Close();
                    _clientStream.Dispose();

                    Console.WriteLine("Соединение закрыто");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при отключении {ex.Message}");
                throw;
            }
        }
    }
}
